{"version":3,"sources":["components/NetworkErrorMessage.js","components/ConnectWallet.js","components/NoWalletDetected.js","components/Popup.js","components/CourseListItem.js","components/Taskboard.jsx","components/CourseView.js","components/CourseList.js","components/Navbar.js","components/Dapp.js","index.js"],"names":["NetworkErrorMessage","message","dismiss","className","role","type","onClick","ConnectWallet","connectWallet","networkError","align","borderRadius","colorScheme","px","NoWalletDetected","href","target","rel","Popup","createCourse","useForm","handleSubmit","register","reset","formState","errors","isSubmitting","useState","useDisclosure","isOpen","onOpen","onClose","mr","onSubmit","data","newData","name","price","ethers","utils","parseEther","symbol","_baseTokenURI","_QnABoardShare","_crowdfundGoalStudentCount","_crowdfundPeriod","_isCrowdfund","_refundPeriod","_tutors","_tutorsPercent","htmlFor","required","placeholder","id","mt","w","Course","course","handleOpenCourse","direction","overflow","backgroundColor","shadow","src","cover","p","flex","fontSize","fontWeight","description","status","value","fund","totalFunding","toFixed","justify","alignItems","purchased","variant","questions","question","solved","answers","questionId","content","bestAnswer","reward","rewardUnit","Taskboard","handleBack","handlePurchase","currentQuestion","setCurrentQuestion","currentQuestionPrice","setCurrentQuestionPrice","maxW","minH","onChange","e","console","log","defaultIndex","Array","from","length","map","d","i","allowMultiple","textAlign","pb","pt","answer","answerQuestion","CourseView","handleRefund","handleRevenue","handleGift","in","unit","mb","h","CourseList","purchaseCourse","coursesJsonArr","refundCourse","giftCourse","revenue","selectedCourse","setSelectedCourse","columns","spacing","courseId","Navbar","selectedAddress","balance","tokenData","ConnectWalletBtn","disconnectWallet","py","slice","undefined","toString","ERROR_CODE_TX_REJECTED_BY_USER","Dapp","props","initialState","txBeingSent","transactionError","courses","state","window","ethereum","this","setState","_resetState","_connectWallet","_dismissNetworkError","_createCourse","_purchaseCourse","_refundCourse","_giftCourse","_revenue","_stopPollingData","request","method","_checkNetwork","_initialize","on","newAddress","userAddress","_initializeEthers","_startPollingData","_provider","providers","Web3Provider","_courseFactory","Contract","contractAddress","CourseFactory","CourseFactoryArtifact","abi","getSigner","_pollDataInterval","setInterval","_updateCourseList","clearInterval","_token","balanceOf","functions","getCourseCount","courseCnt","parseInt","contractAddr","_courseContract","CourseArtifact","_name","_price","crowdfundGoalStudentCount","_goalFund","totalSupply","_currentFund","_purchased","push","courseMockData","formatEther","toNumber","address","to","amount","_dismissTransactionError","transfer","tx","hash","wait","Error","code","error","_course","refund","distributeRevenue","courseAddr","addr","addrToTokenIDPlusOne","_tokenid","tokenid","friendAddr","prompt","asset","transactionHash","qaBoard","QA_address","_qa","QnABoardArtifact","postQuestion","qid","acceptAnswer","enroll","callback","BigNumber","split","networkVersion","React","Component","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.4bfaa84c.chunk.js","sourcesContent":["import React from \"react\";\n\nexport function NetworkErrorMessage({ message, dismiss }) {\n  return (\n    <div className=\"alert alert-danger\" role=\"alert\">\n      {message}\n      <button\n        type=\"button\"\n        className=\"close\"\n        data-dismiss=\"alert\"\n        aria-label=\"Close\"\n        onClick={dismiss}\n      >\n        <span aria-hidden=\"true\">&times;</span>\n      </button>\n    </div>\n  );\n}\n","import React from \"react\";\n\nimport { NetworkErrorMessage } from \"./NetworkErrorMessage\";\nimport { Flex, Stack, Button } from '@chakra-ui/react';\n\nexport function ConnectWallet({ connectWallet, networkError, dismiss }) {\n  return (\n    <Flex align=\"center\">\n      {/* Metamask network should be set to Localhost:8545. */ }\n      {\n        networkError && (\n          <NetworkErrorMessage\n            message={ networkError }\n            dismiss={ dismiss }\n          />\n        )\n      }\n      <Flex align=\"center\">\n        {/* <p>Please connect to your wallet.</p> */ }\n        <Button\n          borderRadius={ 50 }\n          colorScheme='yellow'\n          px={ 8 }\n          type=\"button\"\n          onClick={ connectWallet }\n        >  Connect Wallet\n        </Button>\n      </Flex>\n    </Flex >\n  );\n}\n","import React from \"react\";\n\nexport function NoWalletDetected() {\n  return (\n    <div className=\"container\">\n      <div className=\"row justify-content-md-center\">\n        <div className=\"col-6 p-4 text-center\">\n          <p>\n            No Ethereum wallet was detected. <br />\n            Please install{\" \"}\n            <a\n              href=\"http://metamask.io\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              MetaMask\n            </a>\n            .\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import {\n  Button,\n  FormControl,\n  FormLabel,\n  Input,\n  Modal,\n  ModalBody,\n  ModalCloseButton,\n  ModalContent,\n  ModalFooter,\n  ModalHeader,\n  ModalOverlay,\n  useDisclosure,\n} from \"@chakra-ui/react\";\nimport { ethers } from \"ethers\";\nimport { useForm } from \"react-hook-form\";\n\nimport { useState } from \"react\";\nexport const Popup = ({ createCourse }) => {\n  const {\n    handleSubmit,\n    register,\n    reset,\n    formState: { errors, isSubmitting },\n  } = useForm({});\n  let [newCourse, setNewCourse] = useState({});\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  function _createCourse(data) {\n    const newData = {\n      name: data.name || \"Course101\",\n      price: data.price ? ethers.utils.parseEther(data.price) : 0,\n      symbol: data.symbol || \"CRS\",\n      _baseTokenURI:\n        data._baseTokenURI ||\n        \"ipfs://QmVmhJLwZLTvVN54dp2jeSVRsX7epY8CnuWbr2iAwnWtty/\",\n      _QnABoardShare: data._QnABoardShare || \"20\",\n      _crowdfundGoalStudentCount: data._crowdfundGoalStudentCount || \"3\",\n      _crowdfundPeriod: data._crowdfundPeriod || 100000,\n      _isCrowdfund: data._isCrowdfund || true,\n      _refundPeriod: data._refundPeriod || 100000,\n      _tutors: data._tutors || \"0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512\",\n      _tutorsPercent: data._tutorsPercent || \"100\",\n    };\n    // console.log(newData);\n    createCourse(newData, () => {\n      onClose();\n    });\n    // var data = new FormData(evt.target);\n    // let formObject = Object.fromEntries(data.entries());\n    // console.log(formObject);\n  }\n  return (\n    <>\n      <Button\n        borderRadius={50}\n        colorScheme=\"yellow\"\n        mr={4}\n        px={8}\n        type=\"button\"\n        onClick={onOpen}\n      >\n        {\" \"}\n        CreateCourse\n      </Button>\n      <Modal isOpen={isOpen} onClose={onClose}>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader>Create Course</ModalHeader>\n          <ModalCloseButton />\n          <ModalBody>\n            <form onSubmit={handleSubmit(_createCourse)}>\n              <FormControl>\n                <FormLabel htmlFor=\"Name\">Name</FormLabel>\n                <Input\n                  {...register(\"name\", {\n                    required: false,\n                  })}\n                  placeholder=\"Course101\"\n                />\n              </FormControl>\n              <FormControl>\n                <FormLabel htmlFor=\"symbol\">symbol</FormLabel>\n                <Input\n                  {...register(\"symbol\", {\n                    required: false,\n                  })}\n                  id=\"symbol\"\n                  type=\"symbol\"\n                  placeholder=\"CRS\"\n                />\n              </FormControl>\n              <FormControl>\n                <FormLabel htmlFor=\"price\">price</FormLabel>\n                <Input\n                  {...register(\"price\", {\n                    required: false,\n                  })}\n                  id=\"price\"\n                  type=\"float\"\n                  placeholder=\"0\"\n                />\n              </FormControl>\n              <FormControl>\n                <FormLabel htmlFor=\"_baseTokenURI\">_baseTokenURI</FormLabel>\n                <Input\n                  {...register(\"_baseTokenURI\", {\n                    required: false,\n                  })}\n                  id=\"_baseTokenURI\"\n                  placeholder=\"ipfs://QmVmhJLwZLTvVN54dp2jeSVRsX7epY8CnuWbr2iAwnWtty/\"\n                />\n              </FormControl>\n              <FormControl>\n                <FormLabel htmlFor=\"_isCrowdfund\">_isCrowdfund</FormLabel>\n                <Input\n                  {...register(\"_isCrowdfund\", {\n                    required: false,\n                  })}\n                  id=\"_isCrowdfund\"\n                  placeholder=\"true\"\n                />\n              </FormControl>\n              <FormControl>\n                <FormLabel htmlFor=\"_crowdfundPeriod\">\n                  _crowdfundPeriod\n                </FormLabel>\n                <Input\n                  {...register(\"_crowdfundPeriod\", {\n                    required: false,\n                  })}\n                  id=\"_crowdfundPeriod\"\n                  placeholder=\"100000\"\n                />\n              </FormControl>\n\n              <FormControl>\n                <FormLabel htmlFor=\"_crowdfundGoalStudentCount\">\n                  _crowdfundGoalStudentCount\n                </FormLabel>\n\n                <Input\n                  {...register(\"_crowdfundGoalStudentCount\", {\n                    required: false,\n                  })}\n                  id=\"_crowdfundGoalStudentCount\"\n                  type=\"number\"\n                  placeholder=\"3\"\n                />\n              </FormControl>\n              <FormControl>\n                <FormLabel htmlFor=\"_refundPeriod\">_refundPeriod</FormLabel>\n                <Input\n                  {...register(\"_refundPeriod\", {\n                    required: false,\n                  })}\n                  id=\"_refundPeriod\"\n                  placeholder=\"100000\"\n                />\n              </FormControl>\n              <FormControl>\n                <FormLabel htmlFor=\"tutor\">tutor</FormLabel>\n                <Input\n                  {...register(\"_tutors\", {\n                    required: false,\n                  })}\n                  id=\"_tutors\"\n                  placeholder=\"0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512\"\n                />\n              </FormControl>\n              <FormControl>\n                <FormLabel htmlFor=\"_tutorsPercent\">_tutorsPercent</FormLabel>\n                <Input\n                  {...register(\"_tutorsPercent\", {\n                    required: false,\n                  })}\n                  id=\"_tutorsPercent\"\n                  placeholder=\"100\"\n                />\n              </FormControl>\n              <FormControl>\n                <FormLabel htmlFor=\"_QnABoardShare\">_QnABoardShare</FormLabel>\n                <Input\n                  {...register(\"_QnABoardShare\", {\n                    required: false,\n                  })}\n                  id=\"_QnABoardShare\"\n                  placeholder=\"20\"\n                />\n              </FormControl>\n              <Button\n                mt={5}\n                w=\"100%\"\n                borderRadius={50}\n                colorScheme=\"yellow\"\n                mr={4}\n                px={8}\n                type=\"submit\"\n              >\n                {\" \"}\n                Create\n              </Button>\n            </form>\n          </ModalBody>\n\n          <ModalFooter>\n            {/* <Button colorScheme='blue' mr={ 3 } onClick={ onClose }>\n                            Close\n                        </Button> */}\n            {/* <Button variant='ghost'>Secondary Action</Button> */}\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n","import {\n  Box,\n  Text,\n  Image,\n  Button,\n  Flex,\n  Progress,\n  Spacer,\n} from \"@chakra-ui/react\";\nimport React from \"react\";\nimport { Popup } from \"./Popup\";\nexport const Course = ({ course, handleOpenCourse }) => {\n  return (\n    <Flex\n      direction=\"column\"\n      borderRadius=\"5\"\n      overflow=\"hidden\"\n      backgroundColor=\"white\"\n      shadow=\"xl\"\n    >\n      <Image src={course.cover || \"http://via.placeholder.com/640x360\"}></Image>\n      <Flex p=\"5\" direction=\"column\" flex=\"1\">\n        <Text fontSize=\"3xl\" fontWeight=\"semibold\">\n          {course.name}\n        </Text>\n        <Text mt=\"3\">{course.description}</Text>\n        {course.status == \"funding\" && (\n          <Box mt=\"5\">\n            <Progress\n              value={(100 * course.fund) / course.totalFunding}\n              borderRadius=\"5\"\n              colorScheme=\"yellow\"\n            ></Progress>\n            Funding Progress:{\" \"}\n            {((100 * course.fund) / course.totalFunding).toFixed(1)}% (Target\n            Students:\n            {course.totalFunding})\n          </Box>\n        )}\n        <Spacer />\n        <Flex justify=\"end\" alignItems=\"end\" mt=\"4\">\n          {course.purchased && (\n            <Button\n              onClick={() => handleOpenCourse()}\n              w=\"100%\"\n              colorScheme=\"grey\"\n              variant=\"outline\"\n              mt=\"5\"\n            >\n              View\n            </Button>\n          )}\n          {!course.purchased && (\n            <Button\n              onClick={() => handleOpenCourse()}\n              w=\"100%\"\n              colorScheme=\"yellow\"\n              mt=\"5\"\n            >\n              Purchase ({course.price}ETH)\n            </Button>\n          )}\n        </Flex>\n      </Flex>\n    </Flex>\n  );\n};\n","import {\n  Box,\n  Input,\n  Container,\n  AccordionItem,\n  Accordion,\n  AccordionButton,\n  AccordionIcon,\n  AccordionPanel,\n  Text,\n  Image,\n  Button,\n  Flex,\n  Progress,\n  Spacer,\n  Center,\n  Breadcrumb,\n  BreadcrumbItem,\n  BreadcrumbLink,\n} from \"@chakra-ui/react\";\nimport React, { useState } from \"react\";\nimport { LockIcon, StarIcon } from \"@chakra-ui/icons\";\nimport { Fade } from \"@chakra-ui/react\";\nlet questions = [\n  {\n    id: 0,\n    question: \"Question 1\",\n    solved: true,\n    answers: [\n      {\n        questionId: 0,\n        id: 0,\n        content: \"I am the best answer. yaya\",\n        bestAnswer: true,\n      },\n      {\n        questionId: 0,\n        id: 1,\n        content:\n          \"I'm the first runner up... the winner except for the best answer\",\n        bestAnswer: false,\n      },\n    ],\n    reward: 3,\n    rewardUnit: \"LLL\",\n  },\n  {\n    id: 1,\n    question: \"Question 2\",\n    solved: false,\n    answers: [\n      {\n        questionId: 1,\n        id: 0,\n        content: \"Lorem ipsum dolor sit amet, consectetur adipiscing elit\",\n        bestAnswer: false,\n      },\n      {\n        questionId: 1,\n        id: 1,\n        content: \"Lorem ipsum dolor sit amet, consectetur adipiscing elit\",\n        bestAnswer: false,\n      },\n    ],\n    reward: 3,\n    rewardUnit: \"LLL\",\n  },\n];\n\nexport const Taskboard = ({ course, handleBack, handlePurchase }) => {\n  let [currentQuestion, setCurrentQuestion] = useState(\"\");\n  let [currentQuestionPrice, setCurrentQuestionPrice] = useState(3);\n  let handleAddQuestion = () => {\n    console.log(\"submit question\", currentQuestion, currentQuestionPrice);\n    setCurrentQuestion(\"\");\n  };\n  let answerQuestion = () => {\n    // console.log(\"hi\")\n  };\n  return (\n    <Container maxW=\"container.lg\" minH=\"100vh\">\n      <Flex w=\"100%\">\n        <Input\n          flex=\"10\"\n          placeholder=\"ask something\"\n          value={currentQuestion}\n          onChange={(e) => setCurrentQuestion(e.target.value)}\n        ></Input>\n        <Input\n          flex=\"1\"\n          type=\"number\"\n          placeholder=\"price\"\n          value={currentQuestionPrice}\n          onChange={(e) => setCurrentQuestionPrice(e.target.value)}\n        ></Input>\n\n        <Button onClick={() => handleAddQuestion()}>Ask Question</Button>\n      </Flex>\n      <Accordion\n        mt={2}\n        defaultIndex={Array.from({ length: questions.length }).map((d, i) => i)}\n        allowMultiple\n      >\n        {questions.map(({ question, answers, reward, rewardUnit }, i) => (\n          <AccordionItem key={i}>\n            <Box\n              backgroundColor=\"white\"\n              shadow=\"xl\"\n              borderRadius=\"50\"\n              mt=\"1\"\n              overflow=\"hidden\"\n            >\n              <AccordionButton>\n                <Box flex=\"1\" textAlign=\"left\" p={1}>\n                  <Flex>\n                    <Text>{question}</Text>\n                    <Spacer />\n                    <Text> {question.solved && \"[Solved]\"} </Text>\n                    <Text>\n                      {\" \"}\n                      $ {reward} {rewardUnit}\n                    </Text>\n                  </Flex>\n                </Box>\n                <AccordionIcon />\n              </AccordionButton>\n            </Box>\n            <AccordionPanel pb={4} pt=\"10\">\n              {answers.map((answer) => (\n                <Box\n                  flex=\"1\"\n                  textAlign=\"left\"\n                  p={3}\n                  backgroundColor={answer.bestAnswer ? \"yellow.300\" : \"\"}\n                >\n                  <Flex>\n                    <Text flex=\"6\">\n                      {answer.bestAnswer && <StarIcon mr={2}></StarIcon>}\n                      {answer.content}\n                    </Text>\n                    <Spacer></Spacer>\n                    {!answer.bestAnswer && (\n                      <Button borderRadius=\"50\">\n                        <StarIcon></StarIcon>\n                      </Button>\n                    )}\n                  </Flex>\n                </Box>\n              ))}\n\n              <Flex w=\"100%\">\n                <Input placeholder=\"Answer Question\"></Input>\n                <Button onClick={answerQuestion()}>Answer</Button>\n              </Flex>\n            </AccordionPanel>\n          </AccordionItem>\n        ))}\n      </Accordion>\n    </Container>\n  );\n};\n","import {\n  Box,\n  Text,\n  Image,\n  Button,\n  Flex,\n  Progress,\n  Spacer,\n  Center,\n  Breadcrumb,\n  BreadcrumbItem,\n  BreadcrumbLink,\n} from \"@chakra-ui/react\";\nimport { Tabs, TabList, TabPanels, Tab, TabPanel } from \"@chakra-ui/react\";\nimport React from \"react\";\nimport { LockIcon } from \"@chakra-ui/icons\";\nimport { Fade } from \"@chakra-ui/react\";\nimport { Taskboard } from \"./Taskboard.jsx\";\n\nexport const CourseView = ({\n  course,\n  handleBack,\n  handlePurchase,\n  handleRefund,\n  handleGift,\n  handleRevenue,\n}) => {\n  return (\n    <Fade in={ true }>\n\n      <Flex pt=\"4\">\n        <Box flex=\"3\" p=\"6\" px=\"5\">\n          <Breadcrumb>\n            <BreadcrumbItem>\n              <BreadcrumbLink onClick={ handleBack }>Home</BreadcrumbLink>\n            </BreadcrumbItem>\n\n            <BreadcrumbItem>\n              <BreadcrumbLink>\n                <Text>{ course.name }</Text>\n              </BreadcrumbLink>\n            </BreadcrumbItem>\n          </Breadcrumb>\n          <Text fontSize=\"4xl\" fontWeight=\"semibold\">\n            { course.name }\n          </Text>\n          <Image\n            src={ course.cover || \"http://via.placeholder.com/500/360\" }\n          ></Image>\n          <Text mt=\"5\" fontSize=\"2xl\">\n            Contents:\n          </Text>\n          { Array.from({ length: 3 }).map((unit) => {\n            return (\n              <Center backgroundColor=\"white\" p=\"2\" shadow=\"xl\" mb=\"3\">\n                Course Unit\n              </Center>\n            );\n          }) }\n          { course.purchased && course.price != 0 && (\n            <Button mt=\"5\" colorScheme=\"yellow\" onClick={ handleRefund }>\n              { \" \" }\n              Refund Course\n            </Button>\n          ) }\n          <br />\n          { course.price != 0 && (\n            <>\n              <Button mt=\"5\" colorScheme=\"yellow\" onClick={ handleRevenue }>\n                { \" \" }\n                Distribute Revenue\n              </Button>\n              <br />\n              <br />\n              <p>(Needs to wait until the refund period ends.)</p>\n            </>\n          ) }\n        </Box>\n        <Box flex=\"8\" pt=\"15\" px=\"5\">\n          <Flex\n            direction=\"column\"\n            overflow=\"hidden\"\n            backgroundColor=\"white\"\n            shadow=\"xl\"\n            p=\"5\" borderRadius={ 5 }\n          >\n            { !course.purchased ? (\n              <Flex direction=\"column\">\n                <Center p={ 5 }>\n                  <LockIcon w={ 10 } h={ 10 }></LockIcon>\n                </Center>\n                <Text align=\"center\"> Purchase Course to start Learning</Text>\n                <Button mt=\"5\" colorScheme=\"yellow\" onClick={ handlePurchase }>\n                  { \" \" }\n                  Purchase Course ({ course.price }ETH)\n                </Button>\n              </Flex>\n            ) : (\n              <Tabs>\n                <TabList>\n                  <Tab>Course Conent</Tab>\n                  <Tab>Discussion Task Board</Tab>\n                </TabList>\n\n                <TabPanels>\n                  <TabPanel>\n                    <Flex direction=\"column\" flex=\"1\">\n                      <Text fontSize=\"3xl\" mb=\"5\">\n                        { \" \" }\n                        Chapter 1\n                      </Text>\n                      <Image src=\"https://placekitten.com/1200/360\"></Image>\n                      <Text mt=\"3\">{ course.description }</Text>\n                      <Text mt=\"3\">{ course.description }</Text>\n                      <Image\n                        mt=\"3\"\n                        src=\"https://placekitten.com/640/360\"\n                      ></Image>\n\n                      <Spacer />\n                    </Flex>\n                  </TabPanel>\n                  <TabPanel>\n                    <Taskboard></Taskboard>\n                  </TabPanel>\n                </TabPanels>\n              </Tabs>\n            ) }\n          </Flex>\n        </Box>\n      </Flex>\n    </Fade>\n  );\n};\n","import {\n  Container,\n  SimpleGrid,\n  Text,\n  Button,\n  Flex,\n  Box,\n  Image,\n} from \"@chakra-ui/react\";\nimport { Course } from \"./CourseListItem\";\nimport courseMockData from \"../data/courses.json\";\nimport { CourseView } from \"./CourseView\";\nimport React, { useState, useEffect } from \"react\";\nimport { Fade } from \"@chakra-ui/react\";\n\nexport const CourseList = ({\n  purchaseCourse,\n  coursesJsonArr,\n  refundCourse,\n  giftCourse,\n  revenue,\n}) => {\n  let [selectedCourse, setSelectedCourse] = useState(null);\n\n  return (\n    <>\n      <Fade in={true}>\n        <Container maxW=\"container.xl\" minH=\"100vh\" pb=\"50\">\n          {selectedCourse && (\n            <>\n              <CourseView\n                key={selectedCourse.id}\n                course={selectedCourse}\n                handleBack={() => setSelectedCourse(null)}\n                handlePurchase={() => purchaseCourse(selectedCourse)}\n                handleRefund={() => refundCourse(selectedCourse)}\n                handleGift={() => giftCourse(selectedCourse)}\n                handleRevenue={() => revenue(selectedCourse)}\n              />\n            </>\n          )}\n          {!selectedCourse && (\n            <>\n              {/* <Image src=\"Learn3-03.jpg\"></Image> */}\n              <Container maxW=\"container.xl\" p=\"5\" minH=\"100vh\">\n                {/* <Text fontSize=\"4xl\" mb={ 5 } >Course List</Text> */}\n                <SimpleGrid w=\"100%\" columns={[1, 1, 2, 3]} spacing={8}>\n                  {coursesJsonArr &&\n                    coursesJsonArr.map((course, courseId) => (\n                      <Course\n                        course={course}\n                        key={courseId}\n                        handleOpenCourse={() => {\n                          setSelectedCourse(course);\n                        }}\n                      ></Course>\n                    ))}\n                </SimpleGrid>\n              </Container>\n            </>\n          )}\n        </Container>\n      </Fade>\n    </>\n  );\n};\n","import { Spacer, Flex, Box, Text, Image, Button } from \"@chakra-ui/react\";\nimport { Popup } from \"./Popup\";\nexport let Navbar = ({\n  selectedAddress,\n  balance,\n  tokenData,\n  ConnectWalletBtn,\n  disconnectWallet,\n  createCourse,\n}) => {\n  return (\n    <Box pt={ 4 }>\n      <Flex\n        px=\"10\"\n        py=\"3\"\n        backgroundColor=\"white\"\n        shadow=\"xl\"\n        borderRadius=\"50\"\n        align=\"center\"\n      >\n        <Box>\n          {/* <Text fontSize='xl'>Learn3 Protocol</Text> */ }\n          <Image src=\"Learn3-02.png\" h=\"55\"></Image>\n        </Box>\n        <Spacer></Spacer>\n        { selectedAddress && (\n          <Popup createCourse={ (data) => createCourse(data) }></Popup>\n        ) }\n        <Flex>\n          { selectedAddress && (\n            <b>\n              { \" \" }\n              { selectedAddress.slice(0, 6) + \"...\" + selectedAddress.slice(-4) }\n            </b>\n          ) }\n          <Spacer w=\"5\"></Spacer>\n          { balance !== undefined && (balance || 0).toString() }{ \" \" }\n          { tokenData?.symbol }\n        </Flex>\n        { !selectedAddress && ConnectWalletBtn }\n        { selectedAddress && <Button\n          borderRadius={ 50 }\n          px={ 6 }\n          type=\"button\"\n          onClick={ disconnectWallet }\n        > Disconnect\n        </Button> }\n      </Flex>\n    </Box>\n  );\n};\n","import React from \"react\";\n\n// We'll use ethers to interact with the Ethereum network and our contract\nimport { BigNumber, ethers } from \"ethers\";\n\n// We import the contract's artifacts and address here, as we are going to be\n// using them with ethers\nimport contractAddress from \"../contracts/contract-address.json\";\nimport CourseArtifact from \"../contracts/Course.json\";\nimport CourseFactoryArtifact from \"../contracts/CourseFactory.json\";\nimport QnABoardArtifact from \"../contracts/QnABoard.json\";\nimport courseMockData from \"../data/courses.json\";\n\n// All the logic of this dapp is contained in the Dapp component.\n// These other components are just presentational ones: they don't have any\n// logic. They just render HTML.\nimport { ConnectWallet } from \"./ConnectWallet\";\nimport { NoTokensMessage } from \"./NoTokensMessage\";\nimport { NoWalletDetected } from \"./NoWalletDetected\";\nimport { TransactionErrorMessage } from \"./TransactionErrorMessage\";\nimport { Transfer } from \"./Transfer\";\nimport { WaitingForTransactionMessage } from \"./WaitingForTransactionMessage\";\n\nimport { Box, Container, Image } from \"@chakra-ui/react\";\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\nimport { CourseList } from \"./CourseList\";\nimport { Navbar } from \"./Navbar\";\n\n// import { OpenSeaSDK, Network } from \"opensea-js\";\n// This is the Hardhat Network id, you might change it in the hardhat.config.js.\n// If you are using MetaMask, be sure to change the Network id to 1337.\n// Here's a list of network ids https://docs.metamask.io/guide/ethereum-provider.html#properties\n// to use when deploying to other networks.\nconst HARDHAT_NETWORK_ID = \"31337\";\n\n// This is an error code that indicates that the user canceled a transaction\nconst ERROR_CODE_TX_REJECTED_BY_USER = 4001;\n\n// This component is in charge of doing these things:\n//   1. It connects to the user's wallet\n//   2. Initializes ethers and the Token contract\n//   3. Polls the user balance to keep it updated.\n//   4. Transfers tokens by sending transactions\n//   5. Renders the whole application\n//\n// Note that (3) and (4) are specific of this sample application, but they show\n// you how to keep your Dapp and contract's state in sync,  and how to send a\n// transaction.\nexport class Dapp extends React.Component {\n  constructor(props) {\n    super(props);\n\n    // We store multiple things in Dapp's state.\n    // You don't need to follow this pattern, but it's an useful example.\n    this.initialState = {\n      // The info of the token (i.e. It's Name and symbol)\n      tokenData: undefined,\n      // The user's address and balance\n      selectedAddress: undefined,\n      balance: undefined,\n      // The ID about transactions being sent, and any possible error with them\n      txBeingSent: undefined,\n      transactionError: undefined,\n      networkError: undefined,\n      courses: undefined,\n    };\n\n    this.state = this.initialState;\n  }\n\n  render() {\n    // Ethereum wallets inject the window.ethereum object. If it hasn't been\n    // injected, we instruct the user to install MetaMask.\n    if (window.ethereum === undefined) {\n      return <NoWalletDetected />;\n    }\n\n    // The next thing we need to do, is to ask the user to connect their wallet.\n    // When the wallet gets connected, we are going to save the users's address\n    // in the component's state. So, if it hasn't been saved yet, we have\n    // to show the ConnectWallet component.\n    //\n    // Note that we pass it a callback that is going to be called when the user\n    // clicks a button. This callback just calls the _connectWallet method.\n    // if (!this.state.selectedAddress) {\n    //   return (\n    //     <ConnectWallet\n    //       connectWallet={ () => this._connectWallet() }\n    //       networkError={ this.state.networkError }\n    //       dismiss={ () => this._dismissNetworkError() }\n    //     />\n    //   );\n    // }\n\n    // If the token data or the user's balance hasn't loaded yet, we show\n    // a loading component.\n    // if (!this.state.tokenData || !this.state.balance) {\n    //   return <Loading />;\n    // }\n\n    return (\n      <>\n        <Box backgroundColor=\"#E9E9E7\">\n          <Container maxW=\"100%\">\n            <Navbar\n              maxW=\"100%\"\n              selectedAddress={ this.state.selectedAddress }\n              balance={ this.state.balance }\n              tokenData={ this.state.tokenData }\n              disconnectWallet={ () => {\n                console.log(\"hi\");\n                this.setState({ selectedAddress: undefined });\n                this._resetState();\n              } }\n              ConnectWalletBtn={\n                <ConnectWallet\n                  connectWallet={ () => this._connectWallet() }\n                  networkError={ this.state.networkError }\n                  dismiss={ () => this._dismissNetworkError() }\n                />\n              }\n              createCourse={ (data) => this._createCourse(data) }\n            ></Navbar>\n            { !this.state.selectedAddress &&\n              <Image src=\"Learn3.jpg\"></Image>\n            }\n            <CourseList\n              purchaseCourse={ (selectedCourse) =>\n                this._purchaseCourse(selectedCourse)\n              }\n              coursesJsonArr={ this.state.courses }\n              refundCourse={ (selectedCourse) =>\n                this._refundCourse(selectedCourse)\n              }\n              giftCourse={ (selectedCourse) => this._giftCourse(selectedCourse) }\n              revenue={ (selectedCourse) => this._revenue(selectedCourse) }\n            ></CourseList>\n          </Container>\n        </Box>\n      </>\n    );\n\n    // If everything is loaded, we render the application.\n    return (\n      <div className=\"container p-4\">\n        <div className=\"row\">\n          <div className=\"col-12\">\n            <h1>\n              { this.state.tokenData.name } ({ this.state.tokenData.symbol })\n            </h1>\n            <p>\n              Welcome <b>{ this.state.selectedAddress }</b>, you have{ \" \" }\n              <b>\n                { this.state.balance.toString() } { this.state.tokenData.symbol }\n              </b>\n              .\n            </p>\n          </div>\n        </div>\n\n        <hr />\n\n        <div className=\"row\">\n          <div className=\"col-12\">\n            {/* \n              Sending a transaction isn't an immediate action. You have to wait\n              for it to be mined.\n              If we are waiting for one, we show a message here.\n            */}\n            { this.state.txBeingSent && (\n              <WaitingForTransactionMessage txHash={ this.state.txBeingSent } />\n            ) }\n\n            {/* \n              Sending a transaction can fail in multiple ways. \n              If that happened, we show a message here.\n            */}\n            { this.state.transactionError && (\n              <TransactionErrorMessage\n                message={ this._getRpcErrorMessage(this.state.transactionError) }\n                dismiss={ () => this._dismissTransactionError() }\n              />\n            ) }\n          </div>\n        </div>\n\n        <div className=\"row\">\n          <div className=\"col-12\">\n            {/*\n              If the user has no tokens, we don't show the Transfer form\n            */}\n            { this.state.balance.eq(0) && (\n              <NoTokensMessage selectedAddress={ this.state.selectedAddress } />\n            ) }\n\n            {/*\n              This component displays a form that the user can use to send a \n              transaction and transfer some tokens.\n              The component doesn't have logic, it just calls the transferTokens\n              callback.\n            */}\n            { this.state.balance.gt(0) && (\n              <Transfer\n                transferTokens={ (to, amount) =>\n                  this._transferTokens(to, amount)\n                }\n                tokenSymbol={ this.state.tokenData.symbol }\n              />\n            ) }\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  componentWillUnmount() {\n    // We poll the user's balance, so we have to stop doing that when Dapp\n    // gets unmounted\n    this._stopPollingData();\n  }\n\n  async _connectWallet() {\n    // This method is run when the user clicks the Connect. It connects the\n    // dapp to the user's wallet, and initializes it.\n\n    // To connect to the user's wallet, we have to run this method.\n    // It returns a promise that will resolve to the user's address.\n    // this._originalProvider = new WalletConnectProvider({\n    //   rpc: {\n    //     4: process.env.REACT_APP_RINKEBY,\n    //     // 137: process.env.REACT_APP_POLYGON,\n    //   },\n    //   qrcodeModalOptions: {\n    //     mobileLinks: [\n    //       \"rainbow\",\n    //       \"metamask\",\n    //       \"argent\",\n    //       \"trust\",\n    //       \"imtoken\",\n    //       \"pillar\",\n    //     ],\n    //     desktopLinks: [\"encrypted ink\", \"metamask\"],\n    //   },\n    // });\n    // await this._originalProvider.enable();\n\n    const [selectedAddress] = await window.ethereum.request({\n      method: \"eth_requestAccounts\",\n    });\n\n    // Once we have the address, we can initialize the application.\n\n    // First we check the network\n    if (!this._checkNetwork()) {\n      return;\n    }\n\n    this._initialize(selectedAddress);\n\n    // We reinitialize it whenever the user changes their account.\n    window.ethereum.on(\"accountsChanged\", ([newAddress]) => {\n      this._stopPollingData();\n      // `accountsChanged` event can be triggered with an undefined newAddress.\n      // This happens when the user removes the Dapp from the \"Connected\n      // list of sites allowed access to your addresses\" (Metamask > Settings > Connections)\n      // To avoid errors, we reset the dapp state\n      if (newAddress === undefined) {\n        return this._resetState();\n      }\n\n      this._initialize(newAddress);\n    });\n\n    // We reset the dapp state if the network is changed\n    window.ethereum.on(\"chainChanged\", ([networkId]) => {\n      this._stopPollingData();\n      this._resetState();\n    });\n  }\n\n  _initialize(userAddress) {\n    // This method initializes the dapp\n\n    // We first store the user's address in the component's state\n    this.setState({\n      selectedAddress: userAddress,\n    });\n\n    // Then, we initialize ethers, fetch the token's data, and start polling\n    // for the user's balance.\n\n    // Fetching the token data and the user's balance are specific to this\n    // sample project, but you can reuse the same initialization pattern.\n    this._initializeEthers();\n    // this._getTokenData();\n    this._startPollingData();\n  }\n\n  async _initializeEthers() {\n    // We first initialize ethers by creating a provider using window.ethereum\n    // this._provider = new ethers.providers.Web3Provider(this._originalProvider);\n    this._provider = new ethers.providers.Web3Provider(window.ethereum);\n    // this.openseaSDK = new OpenSeaSDK(this._provider, {\n    //   networkName: Network.Rinkeby,\n    //   apiKey: process.env.REACT_APP_OPENSEA_API_KEY,\n    // });\n    // Then, we initialize the contract using that provider and the token's\n    // artifact. You can do this same thing with your contracts.\n\n    this._courseFactory = new ethers.Contract(\n      contractAddress.CourseFactory,\n      CourseFactoryArtifact.abi,\n      this._provider.getSigner(0)\n    );\n    // this._QA = new ethers.Contract(\n    //   contractAddress._QnABoard,\n    //   QnABoardArtifact.abi,\n    //   this._provider.getSigner(0)\n    // );\n\n    window._courseFactory = this._courseFactory;\n  }\n\n  // The next two methods are needed to start and stop polling data. While\n  // the data being polled here is specific to this example, you can use this\n  // pattern to read any data from your contracts.\n  //\n  // Note that if you don't need it to update in near real time, you probably\n  // don't need to poll it. If that's the case, you can just fetch it when you\n  // initialize the app, as we do with the token data.\n  _startPollingData() {\n    this._pollDataInterval = setInterval(() => {\n      // this._updateBalance();\n      this._updateCourseList();\n    }, 1000);\n\n    // We run it once immediately so we don't have to wait for it\n    // this._updateBalance();\n    this._updateCourseList();\n  }\n\n  _stopPollingData() {\n    clearInterval(this._pollDataInterval);\n    this._pollDataInterval = undefined;\n  }\n\n  // The next two methods just read from the contract and store the results\n  // in the component state.\n  async _getTokenData() {\n    const name = await this._token.name();\n    const symbol = await this._token.symbol();\n\n    this.setState({ tokenData: { name, symbol } });\n  }\n\n  async _updateBalance() {\n    const balance = await this._token.balanceOf(this.state.selectedAddress);\n    this.setState({ balance });\n  }\n  async _updateCourseList() {\n    if (!this._courseFactory) return;\n    const courseCnt = await this._courseFactory.functions.getCourseCount();\n    // console.log(parseInt(courseCnt));\n    // let etherPrice = await this._provider.getEtherPrice();\n    let courses = [];\n    for (let i = 0; i < parseInt(courseCnt); i++) {\n      let contractAddr = await this._courseFactory.courses(i);\n      let _courseContract = new ethers.Contract(\n        contractAddr,\n        CourseArtifact.abi,\n        this._provider.getSigner(0)\n      );\n      const _name = await _courseContract.name();\n      // console.log(_courseContract);\n      const _price = await _courseContract.price();\n      const _goalFund = await _courseContract.crowdfundGoalStudentCount();\n      const _currentFund = await _courseContract.totalSupply();\n      const _purchased = await _courseContract.balanceOf(\n        this.state.selectedAddress\n      );\n      // console.log(_purchased);\n      courses.push({\n        id: courses.length,\n        name: _name,\n        cover: courseMockData[courses.length].cover,\n        description: \"This is a course you just created.\",\n        status: \"funding\",\n        price: ethers.utils.formatEther(_price),\n        totalFunding: _goalFund.toNumber(),\n        fund: _currentFund.toNumber(),\n        purchased: _purchased.toNumber() != 0,\n        address: contractAddr,\n      });\n    }\n    // console.log(courses);\n    this.setState({ courses });\n  }\n\n  // This method sends an ethereum transaction to transfer tokens.\n  // While this action is specific to this application, it illustrates how to\n  // send a transaction.\n  async _transferTokens(to, amount) {\n    // Sending a transaction is a complex operation:\n    //   - The user can reject it\n    //   - It can fail before reaching the ethereum network (i.e. if the user\n    //     doesn't have ETH for paying for the tx's gas)\n    //   - It has to be mined, so it isn't immediately confirmed.\n    //     Note that some testing networks, like Hardhat Network, do mine\n    //     transactions immediately, but your dapp should be prepared for\n    //     other networks.\n    //   - It can fail once mined.\n    //\n    // This method handles all of those things, so keep reading to learn how to\n    // do it.\n\n    try {\n      // If a transaction fails, we save that error in the component's state.\n      // We only save one such error, so before sending a second transaction, we\n      // clear it.\n      this._dismissTransactionError();\n\n      // We send the transaction, and save its hash in the Dapp's state. This\n      // way we can indicate that we are waiting for it to be mined.\n      const tx = await this._token.transfer(to, amount);\n      this.setState({ txBeingSent: tx.hash });\n\n      // We use .wait() to wait for the transaction to be mined. This method\n      // returns the transaction's receipt.\n      const receipt = await tx.wait();\n\n      // The receipt, contains a status flag, which is 0 to indicate an error.\n      if (receipt.status === 0) {\n        // We can't know the exact error that made the transaction fail when it\n        // was mined, so we throw this generic one.\n        throw new Error(\"Transaction failed\");\n      }\n\n      // If we got here, the transaction was successful, so you may want to\n      // update your state. Here, we update the user's balance.\n      // await this._updateBalance();\n    } catch (error) {\n      // We check the error code to see if this error was produced because the\n      // user rejected a tx. If that's the case, we do nothing.\n      if (error.code === ERROR_CODE_TX_REJECTED_BY_USER) {\n        return;\n      }\n\n      // Other errors are logged and stored in the Dapp's state. This is used to\n      // show them to the user, and for debugging.\n      console.error(error);\n      this.setState({ transactionError: error });\n    } finally {\n      // If we leave the try/catch, we aren't sending a tx anymore, so we clear\n      // this part of the state.\n      this.setState({ txBeingSent: undefined });\n    }\n  }\n  async _refundCourse(selectedCourse) {\n    try {\n      this._dismissTransactionError();\n      console.log(\"refunding\");\n      let _course = new ethers.Contract(\n        selectedCourse.address,\n        CourseArtifact.abi,\n        this._provider.getSigner(0)\n      );\n      const tx = await _course.refund();\n\n      this.setState({ txBeingSent: tx.hash });\n\n      const receipt = await tx.wait();\n\n      if (receipt.status === 0) {\n        throw new Error(\"Transaction failed\");\n      }\n    } catch (error) {\n      if (error.code === ERROR_CODE_TX_REJECTED_BY_USER) {\n        return;\n      }\n\n      console.error(error);\n      this.setState({ transactionError: error });\n    } finally {\n      this.setState({ txBeingSent: undefined });\n    }\n  }\n  async _revenue(selectedCourse) {\n    try {\n      this._dismissTransactionError();\n      console.log(\"distributing revenue\");\n      let _course = new ethers.Contract(\n        selectedCourse.address,\n        CourseArtifact.abi,\n        this._provider.getSigner(0)\n      );\n      const tx = await _course.distributeRevenue();\n\n      this.setState({ txBeingSent: tx.hash });\n\n      const receipt = await tx.wait();\n\n      if (receipt.status === 0) {\n        throw new Error(\"Transaction failed\");\n      }\n    } catch (error) {\n      if (error.code === ERROR_CODE_TX_REJECTED_BY_USER) {\n        return;\n      }\n\n      console.error(error);\n      this.setState({ transactionError: error });\n    } finally {\n      this.setState({ txBeingSent: undefined });\n    }\n  }\n  async _giftCourse(selectedCourse) {\n    try {\n      this._dismissTransactionError();\n      console.log(\"gifting\");\n      let _course = new ethers.Contract(\n        selectedCourse.address,\n        CourseArtifact.abi,\n        this._provider.getSigner(0)\n      );\n      const courseAddr = selectedCourse.address;\n      const addr = this.state.selectedAddress;\n      const _tokenid = await _course.addrToTokenIDPlusOne(addr);\n      const tokenid = _tokenid.toNumber() - 1;\n      let friendAddr = prompt(\"Please enter your friend's address:)\");\n      const transactionHash = await _course.transfer({\n        asset: { tokenid, courseAddr },\n        addr, // Must own the asset\n        friendAddr,\n      });\n\n      this.setState({ txBeingSent: transactionHash });\n\n      // const receipt = await tx.wait();\n\n      // if (receipt.status === 0) {\n      //   throw new Error(\"Transaction failed\");\n      // }\n    } catch (error) {\n      if (error.code === ERROR_CODE_TX_REJECTED_BY_USER) {\n        return;\n      }\n\n      console.error(error);\n      this.setState({ transactionError: error });\n    } finally {\n      this.setState({ txBeingSent: undefined });\n    }\n  }\n  async _postQ(selectedCourse, question) {\n    try {\n      this._dismissTransactionError();\n      console.log(\"ask\");\n      let _course = new ethers.Contract(\n        selectedCourse.address,\n        CourseArtifact.abi,\n        this._provider.getSigner(0)\n      );\n      const QA_address = await _course.qaBoard();\n      let _qa = new ethers.Contract(\n        QA_address,\n        QnABoardArtifact.abi,\n        this._provider.getSigner(0)\n      );\n      const tx = await _qa.postQuestion(question.reward, question.hash, {\n        value: question.reward,\n      });\n\n      this.setState({ txBeingSent: tx.hash });\n\n      const receipt = await tx.wait();\n\n      if (receipt.status === 0) {\n        throw new Error(\"Transaction failed\");\n      }\n    } catch (error) {\n      if (error.code === ERROR_CODE_TX_REJECTED_BY_USER) {\n        return;\n      }\n\n      console.error(error);\n      this.setState({ transactionError: error });\n    } finally {\n      this.setState({ txBeingSent: undefined });\n    }\n  }\n  async _ansQ(selectedCourse, answer) {\n    try {\n      this._dismissTransactionError();\n      console.log(\"answer\");\n      let _course = new ethers.Contract(\n        selectedCourse.address,\n        CourseArtifact.abi,\n        this._provider.getSigner(0)\n      );\n      const QA_address = await _course.qaBoard();\n      let _qa = new ethers.Contract(\n        QA_address,\n        QnABoardArtifact.abi,\n        this._provider.getSigner(0)\n      );\n      const tx = await _qa.answerQuestion(answer.qid, answer.hash);\n\n      this.setState({ txBeingSent: tx.hash });\n\n      const receipt = await tx.wait();\n\n      if (receipt.status === 0) {\n        throw new Error(\"Transaction failed\");\n      }\n    } catch (error) {\n      if (error.code === ERROR_CODE_TX_REJECTED_BY_USER) {\n        return;\n      }\n\n      console.error(error);\n      this.setState({ transactionError: error });\n    } finally {\n      this.setState({ txBeingSent: undefined });\n    }\n  }\n  async _acceptQ(selectedCourse, answer) {\n    try {\n      this._dismissTransactionError();\n      console.log(\"accept ans\");\n      let _course = new ethers.Contract(\n        selectedCourse.address,\n        CourseArtifact.abi,\n        this._provider.getSigner(0)\n      );\n      const QA_address = await _course.qaBoard();\n      let _qa = new ethers.Contract(\n        QA_address,\n        QnABoardArtifact.abi,\n        this._provider.getSigner(0)\n      );\n      const tx = await _qa.acceptAnswer(answer.qid, answer.id);\n\n      this.setState({ txBeingSent: tx.hash });\n\n      const receipt = await tx.wait();\n\n      if (receipt.status === 0) {\n        throw new Error(\"Transaction failed\");\n      }\n    } catch (error) {\n      if (error.code === ERROR_CODE_TX_REJECTED_BY_USER) {\n        return;\n      }\n\n      console.error(error);\n      this.setState({ transactionError: error });\n    } finally {\n      this.setState({ txBeingSent: undefined });\n    }\n  }\n  async _purchaseCourse(selectedCourse) {\n    try {\n      this._dismissTransactionError();\n      // console.log(\"purchasing course\", selectedCourse.address);\n      let _course = new ethers.Contract(\n        selectedCourse.address,\n        CourseArtifact.abi,\n        this._provider.getSigner(0)\n      );\n      const _price = await _course.price();\n      const tx = await _course.enroll({\n        value: _price,\n      });\n      //  const tx = await this._course.createCourse(\n      //    data.name,\n      //    data.symbol,\n      //    BigNumber.from(data.price),\n      //    data._baseTokenURI,\n      //    data._isCrowdfund == \"true\",\n      //    BigNumber.from(data._crowdfundPeriod),\n      //    BigNumber.from(data._crowdfundGoalStudentCount),\n      //    BigNumber.from(data._refundPeriod),\n      //    data._tutors.split(\",\"),\n      //    data._tutorsPercent.split(\",\"),\n      //    BigNumber.from(data._QnABoardShare)\n      //  );\n      this.setState({ txBeingSent: tx.hash });\n\n      const receipt = await tx.wait();\n\n      if (receipt.status === 0) {\n        throw new Error(\"Transaction failed\");\n      }\n    } catch (error) {\n      if (error.code === ERROR_CODE_TX_REJECTED_BY_USER) {\n        return;\n      }\n\n      console.error(error);\n      this.setState({ transactionError: error });\n    } finally {\n      this.setState({ txBeingSent: undefined });\n    }\n  }\n  async _createCourse(data, callback) {\n    try {\n      this._dismissTransactionError();\n      // console.log(\"creating course\", data);\n      // console.log(\n      //   data.name,\n      //   data.symbol,\n      //   // BigNumber.from(data.price),\n      //   data._baseTokenURI,\n      //   data._isCrowdfund == \"true\",\n      //   // BigNumber.from(data._crowdfundPeriod),\n      //   BigNumber.from(data._crowdfundGoalStudentCount),\n      //   BigNumber.from(data._refundPeriod),\n      //   data._tutors.split(\",\"),\n      //   data._tutorsPercent.split(\",\"),\n      //   BigNumber.from(data._QnABoardShare)\n      // );\n      const tx = await this._courseFactory.createCourse(\n        data.name,\n        data.symbol,\n        BigNumber.from(data.price),\n        data._baseTokenURI,\n        data._isCrowdfund == \"true\",\n        BigNumber.from(data._crowdfundPeriod),\n        BigNumber.from(data._crowdfundGoalStudentCount),\n        BigNumber.from(data._refundPeriod),\n        data._tutors.split(\",\"),\n        data._tutorsPercent.split(\",\"),\n        BigNumber.from(data._QnABoardShare)\n      );\n      this.setState({ txBeingSent: tx.hash });\n\n      const receipt = await tx.wait();\n\n      if (receipt.status === 0) {\n        throw new Error(\"Transaction failed\");\n      }\n\n      // await this._updateBalance();\n    } catch (error) {\n      if (error.code === ERROR_CODE_TX_REJECTED_BY_USER) {\n        return;\n      }\n\n      console.error(error);\n      this.setState({ transactionError: error });\n    } finally {\n      this.setState({ txBeingSent: undefined });\n      callback && callback();\n    }\n  }\n\n  // This method just clears part of the state.\n  _dismissTransactionError() {\n    this.setState({ transactionError: undefined });\n  }\n\n  // This method just clears part of the state.\n  _dismissNetworkError() {\n    this.setState({ networkError: undefined });\n  }\n\n  // This is an utility method that turns an RPC error into a human readable\n  // message.\n  _getRpcErrorMessage(error) {\n    if (error.data) {\n      return error.data.message;\n    }\n\n    return error.message;\n  }\n\n  // This method resets the state\n  _resetState() {\n    this.setState(this.initialState);\n  }\n\n  // This method checks if Metamask selected network is Localhost:8545\n  _checkNetwork() {\n    // if (window.ethereum.networkVersion === HARDHAT_NETWORK_ID) {\n    //   return true;\n    // }\n\n    // this.setState({\n    //   networkError: \"Please connect Metamask to Localhost:8545\",\n    // });\n    // if (window.ethereum.networkVersion === \"4\") {\n    //   return true;\n    // }\n    // this.setState({\n    //   networkError: \"Please connect Metamask to Rinkeby\",\n    // });\n    if (window.ethereum.networkVersion === \"137\") {\n      return true;\n    }\n    this.setState({\n      networkError: \"Please connect Metamask to Polygon\",\n    });\n\n    return false;\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport { Dapp } from \"./components/Dapp\";\nimport { ChakraProvider } from '@chakra-ui/react';\nimport {\n  BrowserRouter,\n  Routes,\n  Route,\n} from \"react-router-dom\";\nimport \"./style.css\"\n// We import bootstrap here, but you can remove if you want\nimport \"bootstrap/dist/css/bootstrap.css\";\n\n// This is the entry point of your application, but it just renders the Dapp\n// react component. All of the logic is contained in it.\n\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\nroot.render(\n\n  <React.StrictMode>\n    <ChakraProvider>\n      <Dapp />\n    </ChakraProvider>\n\n  </React.StrictMode>\n); "],"sourceRoot":""}